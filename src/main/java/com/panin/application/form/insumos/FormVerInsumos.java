/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.panin.application.form.insumos;

import com.formdev.flatlaf.FlatClientProperties;
import com.panin.application.form.other.Card;
import com.panin.application.utilities.SearchHeader2;
import com.panin.application.utilities.TableActionCellEditor;
import com.panin.application.utilities.TableActionCellRender;
import com.panin.application.utilities.TableActionEvent;
import com.panin.controladores.ControladorInsumos;
import com.panin.controladores.ControladorMarcaInsumo;
import com.panin.entidades.Insumo;
import com.panin.entidades.MarcaInsumo;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USUARIO
 */
public class FormVerInsumos extends javax.swing.JPanel implements SearchHeader2.BuscadorListener {

    /**
     * Creates new form FormVerInsumo
     */
    public FormVerInsumos() {
        
        String[] columnas = new String[]{
            "Codigo", "Descripcion", "Activo", "Opciones"
        
        };
        modelTable = new DefaultTableModel(columnas, 0) {
            boolean[] canEdit = new boolean[]{
                false, false, false, true
            };
            
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        initComponents();
        searchHeader21.setBackground(getBackground());
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searchHeader21 = new com.panin.application.utilities.SearchHeader2();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Lista de Insumos");

        table.setModel(modelTable);
        table.setRowHeight(70);
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addComponent(searchHeader21, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addComponent(searchHeader21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private com.panin.application.utilities.SearchHeader2 searchHeader21;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
  private DefaultTableModel modelTable;
    private List<Insumo> insumos;
    
    private void init() {
        searchHeader21.setListener(this);
//        this.table.setModel(modelTable );
        this.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:25;"
                + "background:$background"
        );
        
        table.getTableHeader().putClientProperty(FlatClientProperties.STYLE, ""
                + "height:30;"
                + "hoverBackground:null;"
                + "pressedBackground:null;"
                //                + "dropLineShortColor:$Menu.background;"
                + "font:bold;"
                + "background:$Menu.background;"
        );
        
        table.putClientProperty(FlatClientProperties.STYLE, ""
                + "rowHeight:30;"
                + "showHorizontalLines:true;"
                + "showVerticalLines:true;"
                + "intercellSpacing:0,1;"
                //                + "dropLineShortColor:$Menu.background;"
                + "cellFocusColor:$TableHeader.hoverBackground;"
                + "selectionBackground:$Menu.background;"
                + "selectionForeground:$Table.foreground;"
                + "background:$Login.background;"
        );
//        table.setEnabled(false);
        actualizarLista();
        table.getColumnModel().getColumn(3).setCellRenderer(new TableActionCellRender());
        
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onEdit(int row) {
                System.out.println("Editar " + row);
//                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
            
            @Override
            public void onDelete(int row) {
                System.out.println("Eliminar " + row);
//                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
            
            @Override
            public void onView(int row) {
                System.out.println("Ver " + row);
//                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        };
        table.getColumnModel().getColumn(3).setCellEditor(new TableActionCellEditor(event));
        //        table.setSelectionBackground(getBackground());
        //        table.setSelectionBackground(table.getTableHeader());

    }
    
    private void actualizarLista() {
        
        modelTable.setRowCount(0);
        ControladorInsumos controladoInsumo = new ControladorInsumos();
        insumos = controladoInsumo.obtenerInsumos();
//        marcas.sort(Collections.reverseOrder());

        for (Insumo fila : insumos) {
            modelTable.addRow(new Object[]{fila.getId().toString(), fila.getDescripcion(), fila.getActivo()});
        }
        
    }
    
    public void filtrarLista(String texto) {
        
        modelTable.setRowCount(0);
        ControladorInsumos controladoInsumo = new ControladorInsumos();
        
        List<Insumo> insumosFiltradas = (List<Insumo>) insumos.stream()
                .filter(insumo -> insumo.getDescripcion().toLowerCase().contains(texto.toLowerCase()))
                .collect(Collectors.toList());
//        marcas.sort(Collections.reverseOrder());

        for (Insumo fila : insumosFiltradas) {
            modelTable.addRow(new Object[]{fila.getId().toString(), fila.getDescripcion(), fila.getActivo()});
        }
        
    }
    
    @Override
    public void onTextoIngresado(String texto) {
        filtrarLista(texto);
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
}
