/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.panin.application.form.insumos.reportecompra;

import com.formdev.flatlaf.FlatClientProperties;
import com.panin.controladores.ControladorComprasInsumos;
import com.panin.controladores.ControladorConversion;
import com.panin.controladores.ControladorInsumos;
import com.panin.controladores.ControladorUnidadMedida;
import com.panin.entidades.ComprasInsumo;
import com.panin.entidades.Conversion;
import com.panin.entidades.Insumo;
import com.panin.entidades.UnidadMedida;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author USUARIO
 */
public class FormReporteComprasInsumos extends javax.swing.JPanel {

    /**
     * Creates new form FormReporteComprasInsumos
     */
    public FormReporteComprasInsumos() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jDateDesde1 = new com.toedter.calendar.JDateChooser();
        jComboBoxUnidad = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jDateHasta = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxInsumos = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        jLabel4.setText("Unidad Medida");

        jLabel1.setText("Desde");

        jLabel2.setText("Hasta");

        jLabel3.setText("Insumo");

        jButton1.setText("Consultar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateDesde1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxInsumos, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(263, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBoxUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(jButton1)
                        .addGap(10, 10, 10))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateDesde1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBoxInsumos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)))
                .addGap(1, 1, 1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(44, 44, 44))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                .addGap(40, 40, 40))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Date desde = jDateDesde1.getDate() == null ? null : jDateDesde1.getDate();
        Date hasta = jDateHasta.getDate() == null ? null : jDateHasta.getDate();

        if (desde != null || hasta != null) {
            Insumo insumo = (Insumo) jComboBoxInsumos.getSelectedItem();
            ControladorComprasInsumos controladorComprasInsumos = new ControladorComprasInsumos();
            System.out.println(insumo.getDescripcion());
            if (insumo.getDescripcion().equals("Todos")) {
                //Buscar todos los insumos
                if (desde != null && hasta != null) {

                    listaCompras = controladorComprasInsumos.obtenerComprasInsumosFecha(desde, hasta);
                } else if (desde != null) {
                    System.out.println(desde);
                    listaCompras = controladorComprasInsumos.obtenerComprasInsumosDesde(desde);
                } else if (hasta != null) {
                    listaCompras = controladorComprasInsumos.obtenerComprasInsumosHasta(hasta);
                }

                actualizarLista();

            } else {
                //Buscar por un insumo especifico

                if (desde != null && hasta != null) {
                    listaCompras = controladorComprasInsumos.obtenerComprasDesdeHasta(insumo, desde, hasta);
                } else if (desde != null) {
                    listaCompras = controladorComprasInsumos.obtenerComprasDesde(insumo, desde);
                } else if (hasta != null) {
                    listaCompras = controladorComprasInsumos.obtenerComprasHasta(insumo, hasta);
                }
                actualizarLista();
            }

        }


    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<Insumo> jComboBoxInsumos;
    private javax.swing.JComboBox<UnidadMedida> jComboBoxUnidad;
    private com.toedter.calendar.JDateChooser jDateDesde1;
    private com.toedter.calendar.JDateChooser jDateHasta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel modelTable;
    private List<ComprasInsumo> listaCompras;

    private void init() {
//        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody

//        jPanel1.setLayout(new MigLayout("al center"));
        ControladorInsumos controladorInsumo = new ControladorInsumos();
        List<Insumo> insumos = controladorInsumo.obtenerInsumos();
        Insumo all = new Insumo();
        all.setDescripcion("Todos");
        jComboBoxInsumos.addItem(all);
        for (Insumo insumo : insumos) {
            jComboBoxInsumos.addItem(insumo);
            actualizarUnidadMedida();
        }

        String[] columnas = new String[]{
            "Id Insumo", "Insumo", "Id Compra", "Marca", "Cantidad", "Unidad Medida", "Precio", "Fecha", "Hora",};
        modelTable = new DefaultTableModel(columnas, 0);
        this.table.setModel(modelTable);
        TableColumnModel columnModel = table.getColumnModel();
        TableColumn columnaCantidad = columnModel.getColumn(0);
        columnaCantidad.setPreferredWidth(12);
        columnaCantidad = columnModel.getColumn(2);
        columnaCantidad.setPreferredWidth(12);
        columnaCantidad = columnModel.getColumn(5);
        columnaCantidad.setPreferredWidth(20);
        columnaCantidad = columnModel.getColumn(7);
        columnaCantidad.setPreferredWidth(20);
        columnaCantidad = columnModel.getColumn(8);
        columnaCantidad.setPreferredWidth(15);
        columnaCantidad = columnModel.getColumn(4);
        columnaCantidad.setPreferredWidth(30);
        columnaCantidad = columnModel.getColumn(6);
        columnaCantidad.setPreferredWidth(30);
        columnaCantidad = columnModel.getColumn(1);
        columnaCantidad.setPreferredWidth(180);
         columnaCantidad = columnModel.getColumn(3);
        columnaCantidad.setPreferredWidth(140);
        this.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:25;"
                + "background:$background"
        );

        table.getTableHeader().putClientProperty(FlatClientProperties.STYLE, ""
                + "height:30;"
                + "hoverBackground:null;"
                + "pressedBackground:null;"
                //                + "dropLineShortColor:$Menu.background;"
                + "font:bold;"
                + "background:$Menu.background;"
        );

        table.putClientProperty(FlatClientProperties.STYLE, ""
                + "rowHeight:30;"
                + "showHorizontalLines:true;"
                + "showVerticalLines:true;"
                + "intercellSpacing:0,1;"
                //                + "dropLineShortColor:$Menu.background;"
                + "cellFocusColor:$TableHeader.hoverBackground;"
                + "selectionBackground:$TableHeader.hoverBackground;"
                + "selectionForeground:$Table.foreground;"
                + "background:$Login.background;"
        );

        table.setEnabled(false);

    }

    private void actualizarUnidadMedida() {
        jComboBoxInsumos.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jComboBoxUnidad.removeAllItems();
                Insumo insumo = (Insumo) jComboBoxInsumos.getSelectedItem();
                if (!insumo.getDescripcion().equals("Todos")) {
                    for (UnidadMedida um : insumo.getIdTipoMedida().getUnidadMedidaCollection()) {
                        jComboBoxUnidad.addItem(um);
                    }
                }

            }
        });
    }

    private void actualizarLista() {
        modelTable.setRowCount(0);
        listaCompras.sort(Collections.reverseOrder());
        UnidadMedida medidaSeleccionada;

        if (jComboBoxUnidad.getSelectedItem() != null) {
            medidaSeleccionada = (UnidadMedida) jComboBoxUnidad.getSelectedItem();
        } else {
            medidaSeleccionada = new UnidadMedida();
            medidaSeleccionada.setUnidadBase(true);
        }

        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");

        SimpleDateFormat formatterh = new SimpleDateFormat("HH:mm:ss:");
        String hora;

        for (ComprasInsumo fila : listaCompras) {
            DecimalFormat df = new DecimalFormat("#,##0.00");
            String marca = "NA";
            ControladorUnidadMedida controladorUnidadMedida = new ControladorUnidadMedida();
            ControladorConversion controladorConversion = new ControladorConversion();
            BigDecimal precioCalculado = fila.getPrecio();
            BigDecimal cantidadCalculada = fila.getCantidad();
            String unidadAbreviatura = fila.getUnidadMedidaId().toString();
            String cantidadFormateada;
            String precioFormateado;
            hora = fila.getHora().toString();
            if (fila.getUnidadMedidaId().isUnidadBase()) {
                precioCalculado = precioCalculado.multiply(fila.getCantidad());
            } else {
                UnidadMedida umb = controladorUnidadMedida.obtenerUnidadBase(fila.getUnidadMedidaId());
                Conversion conversion = controladorConversion.obtenerFactorConversion(umb, fila.getUnidadMedidaId());
                cantidadCalculada = fila.getCantidad().multiply(conversion.getFactorConversion());
                precioCalculado = precioCalculado.multiply(cantidadCalculada);
            }
//            System.out.println(medidaSeleccionada.isUnidadBase());
            if (!medidaSeleccionada.isUnidadBase()) {
                cantidadCalculada = cantidadCalculada.multiply(controladorConversion.obtenerFactorConversion(controladorUnidadMedida.obtenerUnidadBase(medidaSeleccionada), medidaSeleccionada).getFactorConversion());
                unidadAbreviatura = medidaSeleccionada.toString();
//                System.out.println("Medida seleccionada " + unidadAbreviatura);
            }

            if (fila.getMarcaInsumo() != null) {
                marca = fila.getMarcaInsumo().getNombre();
            }
            String strDate = formatter.format(fila.getFecha());
            String strHora = formatter.format(fila.getHora());
            BigDecimal redondeado = precioCalculado.setScale(1, RoundingMode.HALF_UP);
            double valorDouble = redondeado.doubleValue();
            cantidadFormateada = df.format(cantidadCalculada.doubleValue());
            precioFormateado = df.format(valorDouble);
            modelTable.addRow(new Object[]{fila.getInsumo().getId().toString(), fila.getInsumo(), fila.getId().toString(), marca, cantidadFormateada, unidadAbreviatura, valorDouble, strDate, hora,});
        }

        // Convertir a double
    }
}
