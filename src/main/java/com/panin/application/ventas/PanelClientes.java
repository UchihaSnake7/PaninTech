/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.panin.application.ventas;

import com.formdev.flatlaf.FlatClientProperties;
import com.panin.application.utilities.SearchHeader2;
import com.panin.application.utilities.TableActionCellEditor;
import com.panin.application.utilities.TableActionCellRender;
import com.panin.application.utilities.TableActionEvent;
import com.panin.application.ventas.PanelEditarCliente.BotonClickListener;
import com.panin.controladores.ControladorCliente;
import com.panin.entidades.Cliente;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author USUARIO
 */
public class PanelClientes extends javax.swing.JPanel implements SearchHeader2.BuscadorListener, PanelEditarCliente.BotonClickListener {

    /**
     * Creates new form PanelClientes
     */
    public PanelClientes() {
        initComponents();
        init();
        this.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:25;"
                + "background:$background"
        );
        panelTable.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:25;"
                + "background:$background"
        );

        table.getTableHeader().putClientProperty(FlatClientProperties.STYLE, ""
                + "height:30;"
                + "hoverBackground:null;"
                + "pressedBackground:null;"
                //                + "dropLineShortColor:$Menu.background;"
                + "font:bold;"
                + "background:$Menu.background;"
        );

        table.putClientProperty(FlatClientProperties.STYLE, ""
                + "rowHeight:30;"
                + "showHorizontalLines:true;"
                + "showVerticalLines:true;"
                + "intercellSpacing:0,1;"
                //                + "dropLineShortColor:$Menu.background;"
                + "cellFocusColor:$TableHeader.hoverBackground;"
                + "selectionBackground:$TableHeader.hoverBackground;"
                + "selectionForeground:$Table.foreground;"
                + "background:$Login.background;"
        );

//        table.setEnabled(false);
        searchHeader21.setBackground(getBackground());
        searchHeader21.setListener(this);
        init();
        redimensionarLista();
        actualizarLista();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        panelTable = new javax.swing.JPanel();
        searchHeader21 = new com.panin.application.utilities.SearchHeader2();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout panelTableLayout = new javax.swing.GroupLayout(panelTable);
        panelTable.setLayout(panelTableLayout);
        panelTableLayout.setHorizontalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTableLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchHeader21, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        panelTableLayout.setVerticalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTableLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(searchHeader21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 837, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 901, Short.MAX_VALUE)
            .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelPrincipalLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelPrincipalLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 919, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JPanel panelTable;
    private com.panin.application.utilities.SearchHeader2 searchHeader21;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
 private DefaultTableModel modelTable;
    private List<Cliente> clientes;
    private PanelEditarCliente panelEditarCliente;

    private void init() {
        String[] columnas = new String[]{
            "Codigo", "Cedula", "Nombre", "Apellido", "Telefono", "Email", "Fecha de Nacimiento", "Direcci√≥n", "Opciones"};
        panelEditarCliente = new PanelEditarCliente();
        panelEditarCliente.setListener(this);
        modelTable = new DefaultTableModel(columnas, 0) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        this.table.setModel(modelTable);
        table.getColumnModel().getColumn(8).setCellRenderer(new TableActionCellRender());
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onEdit(int row) {

                ControladorCliente controladorCliente = new ControladorCliente();
                String id = (String) modelTable.getValueAt(row, 0);
                Cliente cliente = controladorCliente.obtenerClienteById(Integer.parseInt(id));
                System.out.println("Editar " + row);
//                panelEditarCliente.setVisible(true);
                panelTable.setVisible(false);
                panelEditarCliente.setVisible(true);
//                panelPrincipal.remove(panelTable);
                cambioDePanel(panelEditarCliente);
                panelEditarCliente.iniciar(cliente);
            }

            @Override

            public void onDelete(int row) {
//                ControladorInsumos controladorInsumo = new ControladorInsumos();
//                String id = (String) modelTable.getValueAt(row, 0);
//                Insumo insumo = controladorInsumo.obtenerInsumobyId((Integer.parseInt(id)));
//
//                int respuesta = JOptionPane.showConfirmDialog(null, "¬øEst√° seguro de que desea borrar el insumo " + insumo.getDescripcion() + " ? ", "Confirmaci√≥n",
//                        JOptionPane.YES_NO_OPTION);
//                if (respuesta == JOptionPane.YES_OPTION) {
////                    controladorInsumo.abrirSesion();
//                    if (controladorInsumo.delete(insumo)) {
//                        Notifications.getInstance().show(Notifications.Type.SUCCESS, Notifications.Location.TOP_CENTER, "El Insumo se borr√≥ con √âxito!");
//                        modelTable.removeRow(row);
//                    } else {
//                        insumo.setActivo(false);
////                        controladorInsumo.abrirSesion();
//                        if (controladorInsumo.update(insumo)) {
//                            Notifications.getInstance().show(Notifications.Type.WARNING, Notifications.Location.TOP_CENTER, "El Insumo no se puede borrar, se desactiv√≥");
//                            actualizarLista();
//                        } else {
//                            Notifications.getInstance().show(Notifications.Type.ERROR, Notifications.Location.TOP_CENTER, "Error interno");
//                        }
//                    }
//                } else {
//                    Notifications.getInstance().show(Notifications.Type.INFO, Notifications.Location.TOP_CENTER, "Ok");
//                }

//                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }

            @Override
            public void onView(int row) {
//                ControladorInsumos controladorInsumo = new ControladorInsumos();
//                String id = (String) modelTable.getValueAt(row, 0);
//                Insumo insumo = controladorInsumo.obtenerInsumobyId((Integer.parseInt(id)));
//                Application.showForm(new PanelDeInsumo(insumo, false));
                System.out.println("ver " + row);
//                      throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        };

        table.getColumnModel().getColumn(8).setCellEditor(new TableActionCellEditor(event));

    }

    private void cambioDePanel(javax.swing.JPanel panel) {
        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
                panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 854, Short.MAX_VALUE)
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        panelPrincipalLayout.setVerticalGroup(
                panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 963, Short.MAX_VALUE)
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

    }

    private void redimensionarLista() {

        TableColumnModel columnModel = table.getColumnModel();
        TableColumn columnaCantidad = columnModel.getColumn(0);
        columnaCantidad.setPreferredWidth(10);
        columnaCantidad = columnModel.getColumn(1);
        columnaCantidad.setPreferredWidth(10);
        columnaCantidad = columnModel.getColumn(2);
        columnaCantidad.setPreferredWidth(40);
        columnaCantidad = columnModel.getColumn(3);
        columnaCantidad.setPreferredWidth(40);
        columnaCantidad = columnModel.getColumn(4);
        columnaCantidad.setPreferredWidth(20);
        columnaCantidad = columnModel.getColumn(5);
        columnaCantidad.setPreferredWidth(100);
        columnaCantidad = columnModel.getColumn(6);
        columnaCantidad.setPreferredWidth(30);
        columnaCantidad = columnModel.getColumn(7);
        columnaCantidad.setPreferredWidth(150);
    }

    private void actualizarLista() {

        modelTable.setRowCount(0);
        ControladorCliente controladorCliente = new ControladorCliente();
        this.clientes = controladorCliente.obtenerClientes();
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
//        marcas.sort(Collections.reverseOrder());

        for (Cliente fila : clientes) {
            String fecha = formatter.format(fila.getFechaNacimiento());
            modelTable.addRow(new Object[]{fila.getId().toString(), fila.getCedula().toString(), fila.getNombre(), fila.getApellido(), fila.getTelefono(),
                fila.getEmail(), fecha, fila.getDireccion()});
        }

    }

    @Override
    public void onTextoIngresado(String texto) {
        filtarLista(texto);
    }

    private void filtarLista(String texto) {
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        modelTable.setRowCount(0);
        ControladorCliente controladorCliente = new ControladorCliente();

        List<Cliente> clienteFiltradas = (List<Cliente>) clientes.stream()
                .filter(cliente -> cliente.getNombre().toLowerCase().contains(texto.toLowerCase())
                || cliente.getApellido().toLowerCase().contains(texto.toLowerCase())
                || cliente.getId().toString().contains(texto)
                || cliente.getCedula().toString().contains(texto)
                || cliente.getTelefono().contains(texto)
                || formatter.format(cliente.getFechaNacimiento()).contains(texto)
                || cliente.getEmail().contains(texto))
                .collect(Collectors.toList());

        for (Cliente fila : clienteFiltradas) {
            String fecha = formatter.format(fila.getFechaNacimiento());
            modelTable.addRow(new Object[]{fila.getId().toString(), fila.getCedula().toString(), fila.getNombre(), fila.getApellido(), fila.getTelefono(),
                fila.getEmail(), fecha, fila.getDireccion()});
        }

    }

    @Override
    public void onClick() {
        panelEditarCliente.setVisible(false);
        panelTable.setVisible(true);
//        panelPrincipal.remove(panelEditarCliente);
//        cambioDePanel(panelTable);
        actualizarLista();
    }
}
